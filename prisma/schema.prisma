generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

type preferences {
  theme    String
  currency String
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  preferences   preferences?

  MarkupCalculations           MarkupCalculation[]
  BreakEvenPointCalculations   BreakEvenPointCalculation[]
  InvestmentTimeCalculations   InvestmentTimeCalculation[]
  PresentValueCalculations     PresentValueCalculation[]
  AnnualizedReturnCalculations AnnualizedReturnCalculation[]
}

type BreakEvenPointCalculationFormData {
  fixedCosts          Float
  variableCostPerUnit Float
  pricePerUnit        Float
}

model BreakEvenPointCalculation {
  id        String                            @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                            @db.ObjectId
  name      String
  formData  BreakEvenPointCalculationFormData
  createdAt DateTime                          @default(now())
  updatedAt DateTime                          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type MarkupCalculationFormData {
  cost       Float
  salesPrice Float
}

model MarkupCalculation {
  id        String                    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                    @db.ObjectId
  name      String
  formData  MarkupCalculationFormData
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type InvestmentTimeCalculationFormData {
  startingBalance    Float
  endingBalance      Float
  annualInterestRate Float
}

model InvestmentTimeCalculation {
  id        String                            @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                            @db.ObjectId
  name      String
  formData  InvestmentTimeCalculationFormData
  createdAt DateTime                          @default(now())
  updatedAt DateTime                          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type PresentValueCalculationFormData {
  startingBalance    Float
  duration           Float
  durationMultiplier Float
  discountRate       Float
}

model PresentValueCalculation {
  id        String                          @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                          @db.ObjectId
  name      String
  formData  PresentValueCalculationFormData
  createdAt DateTime                        @default(now())
  updatedAt DateTime                        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type AnnualizedReturnCalculationFormData {
  startingBalance    Float
  endingBalance      Float
  duration           Float
  durationMultiplier Float
}

model AnnualizedReturnCalculation {
  id        String                              @id @default(auto()) @map("_id") @db.ObjectId
  userId    String                              @db.ObjectId
  name      String
  formData  AnnualizedReturnCalculationFormData
  createdAt DateTime                            @default(now())
  updatedAt DateTime                            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
